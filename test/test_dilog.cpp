#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN 1

#include "doctest.h"
#include "gm2_dilog.hpp"


#define CHECK_CLOSE(a,b,eps)                            \
   do {                                                 \
      CHECK((a) == doctest::Approx(b).epsilon(eps));    \
   } while (0)


TEST_CASE("real dilog")
{
   const struct Data {
      double x;
      double y;
   } data[] = {
      {-5.0, -2.749279126060808290025587515376268644497},
      {-4.0, -2.369939796998365831985537425350323048751},
      {-3.0, -1.939375420766708953077271719177891441223},
      {-2.0, -1.43674636688368094636290202389358335425 },
      {-1.0, -0.822467033424113218236207583323012594609},
      {-0.5, -0.448414206923646202443064405915774320834},
      { 0.0,  0.0},
      { 0.2,  0.211003775439704772611185096074072517246},
      { 0.5,  0.582240526465012505902656320159680108744},
      { 0.7,  0.889377624286038738601006274807361793537},
      { 1.0,  1.644934066848226436472415166646025189219},
      { 1.2,  2.129169430383959659444305569819388370407},
      { 2.2,  2.458586601999741851737986678758721928694}
   };

   for (const auto& d: data) {
      CHECK_CLOSE(gm2calc::dilog(d.x), d.y, 1e-15);
   }
}


TEST_CASE("complex dilog")
{
   const std::complex<double> im(0.0, 1.0);

   const struct Data {
      std::complex<double> x;
      std::complex<double> y;
   } data[] = {
      {-3.0 - 1.0*im, -1.9740826897205096 - 0.4578225720668134*im},
      {-3.0 , -1.9393754207667090},
      {-3.0 + 1.0*im, -1.9740826897205096 + 0.4578225720668134*im},
      {-2.5 - 1.0*im, -1.7409767233914818 - 0.4952497888922603*im},
      {-2.5 , -1.6988958419950142},
      {-2.5 + 1.0*im, -1.7409767233914818 + 0.4952497888922603*im},
      {-2.0 - 1.0*im, -1.4890920430306578 - 0.5409310031985791*im},
      {-2.0 , -1.4367463668836809},
      {-2.0 + 1.0*im, -1.4890920430306578 + 0.5409310031985791*im},
      {-1.5 - 1.0*im, -1.21471154336048416 - 0.59817442666102881*im},
      {-1.5 , -1.1473806603755708},
      {-1.5 + 1.0*im, -1.21471154336048416 + 0.59817442666102881*im},
      {-1.0 - 1.0*im, -0.91309274969288064 - 0.67235441502995784*im},
      {-1.0 , -0.82246703342411322},
      {-1.0 + 1.0*im, -0.91309274969288064 + 0.67235441502995784*im},
      {-0.5 - 1.0*im, -0.57850297779989620 - 0.77271369495309204*im},
      {-0.5, -0.44841420692364620},
      {-0.5 + 1.0*im, -0.57850297779989620 + 0.77271369495309204*im},
      {-1.0*im, -0.20561675835602830 - 0.91596559417721902*im},
      {0.0, 0.0},
      {1.0*im, -0.20561675835602830 + 0.91596559417721902*im},
      {0.5 - 1.0*im, 0.20335376120592422 - 1.13193958567770896*im},
      {0.5, 0.58224052646501251},
      {0.5 + 1.0*im, 0.20335376120592422 + 1.13193958567770896*im},
      {1.0 - 1.0*im, 0.6168502750680849 - 1.4603621167531195*im},
      {1.0, 1.6449340668482264},
      {1.0 + 1.0*im, 0.6168502750680849 + 1.4603621167531195*im},
      {1.5 - 1.0*im, 0.9614263982142111 - 1.9060629552355733*im},
      {1.5, 2.3743952702724802 - 1.2738062049196005*im},
      {1.5 + 1.0*im, 0.9614263982142111 + 1.9060629552355733*im},
      {2.0 - 1.0*im, 1.1866885370000578 - 2.4077407693457720*im},
      {2.0, 2.4674011002723397 - 2.1775860903036021*im},
      {2.0 + 1.0*im, 1.1866885370000578 + 2.4077407693457720*im},
      {2.5 - 1.0*im, 1.3042589918770261 - 2.9032643754077257*im},
      {2.5, 2.4207908065659338 - 2.8786122318082606*im},
      {2.5 + 1.0*im, 1.3042589918770261 + 2.9032643754077257*im},
      {3.0 - 1.0*im, 1.3459288708210830 - 3.3651104026661943*im},
      {3.0, 2.3201804233130984 - 3.4513922952232027*im},
      {3.0 + 1.0*im, 1.3459288708210830 + 3.3651104026661943*im}
   };

   const double eps = 1e-15;

   for (const auto& d: data) {
      CHECK_CLOSE(std::real(gm2calc::dilog(d.x)), std::real(d.y), eps);
      CHECK_CLOSE(std::imag(gm2calc::dilog(d.x)), std::imag(d.y), eps);
   }
}


TEST_CASE("real clausen_2")
{
   const struct Data {
      double x;
      double y;
   } data[] = {
      {-7.0, -0.96059820624535721 },
      {-6.5, -0.54840355866757701 },
      {-6.0,  0.64078266570172321 },
      {-5.5,  0.98127747477447368 },
      {-5.0,  0.99282013254695672 },
      {-4.5,  0.83183922082321940 },
      {-4.0,  0.56814394442986978 },
      {-3.5,  0.24650453023476942 },
      {-3.0, -0.098026209391301421},
      {-2.5, -0.43359820323553278 },
      {-2.0, -0.72714605086327925 },
      {-1.5, -0.93921859275409211 },
      {-1.0, -1.0139591323607685  },
      {-0.5, -0.84831187770367927 },
      { 0.0,  0.0                 },
      { 0.5,  0.84831187770367927 },
      { 1.0,  1.0139591323607685  },
      { 1.5,  0.93921859275409211 },
      { 2.0,  0.72714605086327925 },
      { 2.5,  0.43359820323553278 },
      { 3.0,  0.098026209391301421},
      { 3.5, -0.24650453023476942 },
      { 4.0, -0.56814394442986978 },
      { 4.5, -0.83183922082321940 },
      { 5.0, -0.99282013254695672 },
      { 5.5, -0.98127747477447368 },
      { 6.0, -0.64078266570172321 },
      { 6.5,  0.54840355866757701 },
      { 7.0,  0.96059820624535721 }
   };

   for (const auto& d: data) {
      CHECK_CLOSE(gm2calc::clausen_2(d.x), d.y, 1e-15);
   }
}
